diff --git a/.travis.yml b/.travis.yml
index a6abc6a..317343a 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -35,7 +35,7 @@ install:
 
 script:
     - cd test
-    - python test_spglib.py
+    - python -m unittest discover -b
     - cd ..
 
 deploy:
diff --git a/python/_spglib.c b/python/_spglib.c
index e6c74f4..ab86b3c 100644
--- a/python/_spglib.c
+++ b/python/_spglib.c
@@ -157,6 +157,7 @@ PyInit__spglib(void)
   init_spglib(void)
 #endif
 {
+  struct module_state *st;
 #if PY_MAJOR_VERSION >= 3
   PyObject *module = PyModule_Create(&moduledef);
 #else
@@ -165,7 +166,8 @@ PyInit__spglib(void)
 
   if (module == NULL)
     INITERROR;
-  struct module_state *st = GETSTATE(module);
+
+  st = GETSTATE(module);
 
   st->error = PyErr_NewException("_spglib.Error", NULL, NULL);
   if (st->error == NULL) {
@@ -180,14 +182,14 @@ PyInit__spglib(void)
 
 static PyObject * py_get_version(PyObject *self, PyObject *args)
 {
-  if (!PyArg_ParseTuple(args, "")) {
-    return NULL;
-  }
-
   PyObject *array;
   int i;
   int version[3];
 
+  if (!PyArg_ParseTuple(args, "")) {
+    return NULL;
+  }
+
   version[0] = spg_get_major_version();
   version[1] = spg_get_minor_version();
   version[2] = spg_get_micro_version();
@@ -211,6 +213,11 @@ static PyObject * py_get_dataset(PyObject *self, PyObject *args)
   PyObject *array, *vec, *mat, *rot, *trans, *wyckoffs, *equiv_atoms;
   PyObject *std_lattice, *std_types, *std_positions;
 
+  double (*lat)[3];
+  double (*pos)[3];
+  int num_atom;
+  int* typat;
+
   if (!PyArg_ParseTuple(args, "OOOdd",
 			&lattice,
 			&position,
@@ -220,10 +227,10 @@ static PyObject * py_get_dataset(PyObject *self, PyObject *args)
     return NULL;
   }
 
-  SPGCONST double (*lat)[3] = (double(*)[3])PyArray_DATA(lattice);
-  SPGCONST double (*pos)[3] = (double(*)[3])PyArray_DATA(position);
-  const int num_atom = PyArray_DIMS(position)[0];
-  const int* typat = (int*)PyArray_DATA(atom_type);
+  lat = (double(*)[3])PyArray_DATA(lattice);
+  pos = (double(*)[3])PyArray_DATA(position);
+  num_atom = PyArray_DIMS(position)[0];
+  typat = (int*)PyArray_DATA(atom_type);
 
   if ((dataset = spgat_get_dataset(lat,
 				   pos,
@@ -352,6 +359,11 @@ static PyObject * py_get_symmetry_from_database(PyObject *self, PyObject *args)
   int hall_number;
   PyArrayObject* rotation;
   PyArrayObject* translation;
+
+  int (*rot)[3][3];
+  double (*trans)[3];
+  int num_sym;
+
   if (!PyArg_ParseTuple(args, "OOi",
 			&rotation,
 			&translation,
@@ -363,11 +375,11 @@ static PyObject * py_get_symmetry_from_database(PyObject *self, PyObject *args)
     Py_RETURN_NONE;
   }
 
-  int (*rot)[3][3] = (int(*)[3][3])PyArray_DATA(rotation);
-  double (*trans)[3] = (double(*)[3])PyArray_DATA(translation);
+  rot = (int(*)[3][3])PyArray_DATA(rotation);
+  trans = (double(*)[3])PyArray_DATA(translation);
 
 
-  const int num_sym = spg_get_symmetry_from_database(rot, trans, hall_number);
+  num_sym = spg_get_symmetry_from_database(rot, trans, hall_number);
 
   return PyLong_FromLong((long) num_sym);
 }
@@ -418,18 +430,22 @@ static PyObject * py_get_spacegroup_type(PyObject *self, PyObject *args)
 static PyObject * py_get_pointgroup(PyObject *self, PyObject *args)
 {
   PyArrayObject* rotations;
-  if (! PyArg_ParseTuple(args, "O", &rotations)) {
-    return NULL;
-  }
 
   int i, j;
   int trans_mat[3][3];
   char symbol[6];
   PyObject* array, * mat, * vec;
+  int(*rot)[3][3];
+  int num_rot;
+  int ptg_num;
+
+  if (! PyArg_ParseTuple(args, "O", &rotations)) {
+    return NULL;
+  }
 
-  SPGCONST int(*rot)[3][3] = (int(*)[3][3])PyArray_DATA(rotations);
-  const int num_rot = PyArray_DIMS(rotations)[0];
-  const int ptg_num = spg_get_pointgroup(symbol, trans_mat, rot, num_rot);
+  rot = (int(*)[3][3])PyArray_DATA(rotations);
+  num_rot = PyArray_DIMS(rotations)[0];
+  ptg_num = spg_get_pointgroup(symbol, trans_mat, rot, num_rot);
 
   /* Transformation matrix */
   mat = PyList_New(3);
@@ -456,6 +472,12 @@ static PyObject * py_standardize_cell(PyObject *self, PyObject *args)
   PyArrayObject* lattice;
   PyArrayObject* position;
   PyArrayObject* atom_type;
+
+  double (*lat)[3];
+  double (*pos)[3];
+  int* typat;
+  int num_atom_std;
+
   if (!PyArg_ParseTuple(args, "OOOiiidd",
 			&lattice,
 			&position,
@@ -468,18 +490,18 @@ static PyObject * py_standardize_cell(PyObject *self, PyObject *args)
     return NULL;
   }
 
-  double (*lat)[3] = (double(*)[3])PyArray_DATA(lattice);
-  SPGCONST double (*pos)[3] = (double(*)[3])PyArray_DATA(position);
-  int* typat = (int*)PyArray_DATA(atom_type);
+  lat = (double(*)[3])PyArray_DATA(lattice);
+  pos = (double(*)[3])PyArray_DATA(position);
+  typat = (int*)PyArray_DATA(atom_type);
 
-  int num_atom_std = spgat_standardize_cell(lat,
-					    pos,
-					    typat,
-					    num_atom,
-					    to_primitive,
-					    no_idealize,
-					    symprec,
-					    angle_tolerance);
+  num_atom_std = spgat_standardize_cell(lat,
+                                        pos,
+                                        typat,
+                                        num_atom,
+                                        to_primitive,
+                                        no_idealize,
+                                        symprec,
+                                        angle_tolerance);
 
   return PyLong_FromLong((long) num_atom_std);
 }
@@ -491,6 +513,12 @@ static PyObject * py_refine_cell(PyObject *self, PyObject *args)
   PyArrayObject* lattice;
   PyArrayObject* position;
   PyArrayObject* atom_type;
+
+  double (*lat)[3];
+  double (*pos)[3];
+  int* typat;
+  int num_atom_std;
+
   if (!PyArg_ParseTuple(args, "OOOidd",
 			&lattice,
 			&position,
@@ -501,16 +529,16 @@ static PyObject * py_refine_cell(PyObject *self, PyObject *args)
     return NULL;
   }
 
-  double (*lat)[3] = (double(*)[3])PyArray_DATA(lattice);
-  SPGCONST double (*pos)[3] = (double(*)[3])PyArray_DATA(position);
-  int* typat = (int*)PyArray_DATA(atom_type);
+  lat = (double(*)[3])PyArray_DATA(lattice);
+  pos = (double(*)[3])PyArray_DATA(position);
+  typat = (int*)PyArray_DATA(atom_type);
 
-  int num_atom_std = spgat_refine_cell(lat,
-				       pos,
-				       typat,
-				       num_atom,
-				       symprec,
-				       angle_tolerance);
+  num_atom_std = spgat_refine_cell(lat,
+                                   pos,
+                                   typat,
+                                   num_atom,
+                                   symprec,
+                                   angle_tolerance);
 
   return PyLong_FromLong((long) num_atom_std);
 }
@@ -522,6 +550,13 @@ static PyObject * py_find_primitive(PyObject *self, PyObject *args)
   PyArrayObject* lattice;
   PyArrayObject* position;
   PyArrayObject* atom_type;
+
+  double (*lat)[3];
+  double (*pos)[3];
+  int num_atom;
+  int* types;
+  int num_atom_prim;
+
   if (!PyArg_ParseTuple(args, "OOOdd",
 			&lattice,
 			&position,
@@ -531,17 +566,17 @@ static PyObject * py_find_primitive(PyObject *self, PyObject *args)
     return NULL;
   }
 
-  double (*lat)[3] = (double(*)[3])PyArray_DATA(lattice);
-  double (*pos)[3] = (double(*)[3])PyArray_DATA(position);
-  int num_atom = PyArray_DIMS(position)[0];
-  int* types = (int*)PyArray_DATA(atom_type);
+  lat = (double(*)[3])PyArray_DATA(lattice);
+  pos = (double(*)[3])PyArray_DATA(position);
+  num_atom = PyArray_DIMS(position)[0];
+  types = (int*)PyArray_DATA(atom_type);
 
-  int num_atom_prim = spgat_find_primitive(lat,
-					   pos,
-					   types,
-					   num_atom,
-					   symprec,
-					   angle_tolerance);
+  num_atom_prim = spgat_find_primitive(lat,
+                                       pos,
+                                       types,
+                                       num_atom,
+                                       symprec,
+                                       angle_tolerance);
 
   return PyLong_FromLong((long) num_atom_prim);
 }
@@ -554,6 +589,16 @@ static PyObject * py_get_symmetry(PyObject *self, PyObject *args)
   PyArrayObject* rotation;
   PyArrayObject* translation;
   PyArrayObject* atom_type;
+
+  double (*lat)[3];
+  double (*pos)[3];
+  int* types;
+  int num_atom;
+  int (*rot)[3][3];
+  double (*trans)[3];
+  int num_sym_from_array_size;
+  int num_sym;
+
   if (!PyArg_ParseTuple(args, "OOOOOdd",
 			&rotation,
 			&translation,
@@ -565,24 +610,24 @@ static PyObject * py_get_symmetry(PyObject *self, PyObject *args)
     return NULL;
   }
 
-  SPGCONST double (*lat)[3] = (double(*)[3])PyArray_DATA(lattice);
-  SPGCONST double (*pos)[3] = (double(*)[3])PyArray_DATA(position);
-  const int* types = (int*)PyArray_DATA(atom_type);
-  const int num_atom = PyArray_DIMS(position)[0];
-  int (*rot)[3][3] = (int(*)[3][3])PyArray_DATA(rotation);
-  double (*trans)[3] = (double(*)[3])PyArray_DATA(translation);
-  const int num_sym_from_array_size = PyArray_DIMS(rotation)[0];
+  lat = (double(*)[3])PyArray_DATA(lattice);
+  pos = (double(*)[3])PyArray_DATA(position);
+  types = (int*)PyArray_DATA(atom_type);
+  num_atom = PyArray_DIMS(position)[0];
+  rot = (int(*)[3][3])PyArray_DATA(rotation);
+  trans = (double(*)[3])PyArray_DATA(translation);
+  num_sym_from_array_size = PyArray_DIMS(rotation)[0];
 
   /* num_sym has to be larger than num_sym_from_array_size. */
-  const int num_sym = spgat_get_symmetry(rot,
-					 trans,
-					 num_sym_from_array_size,
-					 lat,
-					 pos,
-					 types,
-					 num_atom,
-					 symprec,
-					 angle_tolerance);
+  num_sym = spgat_get_symmetry(rot,
+                               trans,
+                               num_sym_from_array_size,
+                               lat,
+                               pos,
+                               types,
+                               num_atom,
+                               symprec,
+                               angle_tolerance);
   return PyLong_FromLong((long) num_sym);
 }
 
@@ -598,6 +643,17 @@ static PyObject * py_get_symmetry_with_collinear_spin(PyObject *self,
   PyArrayObject* magmom;
   PyArrayObject* equiv_atoms_py;
 
+  double (*lat)[3];
+  double (*pos)[3];
+  double *spins;
+  int *types;
+  int num_atom;
+  int (*rot)[3][3];
+  double (*trans)[3];
+  int *equiv_atoms;
+  int num_sym_from_array_size;
+  int num_sym;
+
   if (!PyArg_ParseTuple(args, "OOOOOOOdd",
 			&rotation,
 			&translation,
@@ -611,29 +667,28 @@ static PyObject * py_get_symmetry_with_collinear_spin(PyObject *self,
     return NULL;
   }
 
-  SPGCONST double (*lat)[3] = (double(*)[3])PyArray_DATA(lattice);
-  SPGCONST double (*pos)[3] = (double(*)[3])PyArray_DATA(position);
-  const double *spins = (double*)PyArray_DATA(magmom);
-  const int *types = (int*)PyArray_DATA(atom_type);
-  const int num_atom = PyArray_DIMS(position)[0];
-  int (*rot)[3][3] = (int(*)[3][3])PyArray_DATA(rotation);
-  double (*trans)[3] = (double(*)[3])PyArray_DATA(translation);
-  int *equiv_atoms = (int*)PyArray_DATA(equiv_atoms_py);
-  const int num_sym_from_array_size = PyArray_DIMS(rotation)[0];
+  lat = (double(*)[3])PyArray_DATA(lattice);
+  pos = (double(*)[3])PyArray_DATA(position);
+  spins = (double*)PyArray_DATA(magmom);
+  types = (int*)PyArray_DATA(atom_type);
+  num_atom = PyArray_DIMS(position)[0];
+  rot = (int(*)[3][3])PyArray_DATA(rotation);
+  trans = (double(*)[3])PyArray_DATA(translation);
+  equiv_atoms = (int*)PyArray_DATA(equiv_atoms_py);
+  num_sym_from_array_size = PyArray_DIMS(rotation)[0];
 
   /* num_sym has to be larger than num_sym_from_array_size. */
-  const int num_sym =
-    spgat_get_symmetry_with_collinear_spin(rot,
-					   trans,
-					   equiv_atoms,
-					   num_sym_from_array_size,
-					   lat,
-					   pos,
-					   types,
-					   spins,
-					   num_atom,
-					   symprec,
-					   angle_tolerance);
+  num_sym = spgat_get_symmetry_with_collinear_spin(rot,
+                                                   trans,
+                                                   equiv_atoms,
+                                                   num_sym_from_array_size,
+                                                   lat,
+                                                   pos,
+                                                   types,
+                                                   spins,
+                                                   num_atom,
+                                                   symprec,
+                                                   angle_tolerance);
   return PyLong_FromLong((long) num_sym);
 }
 
@@ -641,16 +696,21 @@ static PyObject * py_get_grid_point_from_address(PyObject *self, PyObject *args)
 {
   PyArrayObject* grid_address_py;
   PyArrayObject* mesh_py;
+
+  int* grid_address;
+  int* mesh;
+  int gp;
+
   if (!PyArg_ParseTuple(args, "OO",
 			&grid_address_py,
 			&mesh_py)) {
     return NULL;
   }
 
-  const int* grid_address = (int*)PyArray_DATA(grid_address_py);
-  const int* mesh = (int*)PyArray_DATA(mesh_py);
+  grid_address = (int*)PyArray_DATA(grid_address_py);
+  mesh = (int*)PyArray_DATA(mesh_py);
 
-  const int gp = spg_get_grid_point_from_address(grid_address, mesh);
+  gp = spg_get_grid_point_from_address(grid_address, mesh);
 
   return PyLong_FromLong((long) gp);
 }
@@ -666,6 +726,17 @@ static PyObject * py_get_ir_reciprocal_mesh(PyObject *self, PyObject *args)
   PyArrayObject* lattice;
   PyArrayObject* position;
   PyArrayObject* atom_type;
+
+  double (*lat)[3];
+  double (*pos)[3];
+  int* types;
+  int* mesh_int;
+  int* is_shift_int;
+  int num_atom;
+  int (*grid_address)[3];
+  int *map_int;
+  int num_ir;
+
   if (!PyArg_ParseTuple(args, "OOOOiOOOd",
 			&grid_address_py,
 			&map,
@@ -679,26 +750,26 @@ static PyObject * py_get_ir_reciprocal_mesh(PyObject *self, PyObject *args)
     return NULL;
   }
 
-  SPGCONST double (*lat)[3] = (double(*)[3])PyArray_DATA(lattice);
-  SPGCONST double (*pos)[3] = (double(*)[3])PyArray_DATA(position);
-  const int* types = (int*)PyArray_DATA(atom_type);
-  const int* mesh_int = (int*)PyArray_DATA(mesh);
-  const int* is_shift_int = (int*)PyArray_DATA(is_shift);
-  const int num_atom = PyArray_DIMS(position)[0];
-  int (*grid_address)[3] = (int(*)[3])PyArray_DATA(grid_address_py);
-  int *map_int = (int*)PyArray_DATA(map);
+  lat = (double(*)[3])PyArray_DATA(lattice);
+  pos = (double(*)[3])PyArray_DATA(position);
+  types = (int*)PyArray_DATA(atom_type);
+  mesh_int = (int*)PyArray_DATA(mesh);
+  is_shift_int = (int*)PyArray_DATA(is_shift);
+  num_atom = PyArray_DIMS(position)[0];
+  grid_address = (int(*)[3])PyArray_DATA(grid_address_py);
+  map_int = (int*)PyArray_DATA(map);
 
   /* num_sym has to be larger than num_sym_from_array_size. */
-  const int num_ir = spg_get_ir_reciprocal_mesh(grid_address,
-						map_int,
-						mesh_int,
-						is_shift_int,
-						is_time_reversal,
-						lat,
-						pos,
-						types,
-						num_atom,
-						symprec);
+  num_ir = spg_get_ir_reciprocal_mesh(grid_address,
+                                      map_int,
+                                      mesh_int,
+                                      is_shift_int,
+                                      is_time_reversal,
+                                      lat,
+                                      pos,
+                                      types,
+                                      num_atom,
+                                      symprec);
 
   return PyLong_FromLong((long) num_ir);
 }
@@ -713,6 +784,17 @@ py_get_stabilized_reciprocal_mesh(PyObject *self, PyObject *args)
   int is_time_reversal;
   PyArrayObject* rotations;
   PyArrayObject* qpoints;
+
+  int (*grid_address)[3];
+  int *map_int;
+  int* mesh_int;
+  int* is_shift_int;
+  int (*rot)[3][3];
+  int num_rot;
+  double (*q)[3];
+  int num_q;
+  int num_ir;
+
   if (!PyArg_ParseTuple(args, "OOOOiOO",
 			&grid_address_py,
 			&map,
@@ -724,24 +806,24 @@ py_get_stabilized_reciprocal_mesh(PyObject *self, PyObject *args)
     return NULL;
   }
 
-  int (*grid_address)[3] = (int(*)[3])PyArray_DATA(grid_address_py);
-  int *map_int = (int*)PyArray_DATA(map);
-  const int* mesh_int = (int*)PyArray_DATA(mesh);
-  const int* is_shift_int = (int*)PyArray_DATA(is_shift);
-  SPGCONST int (*rot)[3][3] = (int(*)[3][3])PyArray_DATA(rotations);
-  const int num_rot = PyArray_DIMS(rotations)[0];
-  SPGCONST double (*q)[3] = (double(*)[3])PyArray_DATA(qpoints);
-  const int num_q = PyArray_DIMS(qpoints)[0];
-
-  const int num_ir = spg_get_stabilized_reciprocal_mesh(grid_address,
-							map_int,
-							mesh_int,
-							is_shift_int,
-							is_time_reversal,
-							num_rot,
-							rot,
-							num_q,
-							q);
+  grid_address = (int(*)[3])PyArray_DATA(grid_address_py);
+  map_int = (int*)PyArray_DATA(map);
+  mesh_int = (int*)PyArray_DATA(mesh);
+  is_shift_int = (int*)PyArray_DATA(is_shift);
+  rot = (int(*)[3][3])PyArray_DATA(rotations);
+  num_rot = PyArray_DIMS(rotations)[0];
+  q = (double(*)[3])PyArray_DATA(qpoints);
+  num_q = PyArray_DIMS(qpoints)[0];
+
+  num_ir = spg_get_stabilized_reciprocal_mesh(grid_address,
+                                              map_int,
+                                              mesh_int,
+                                              is_shift_int,
+                                              is_time_reversal,
+                                              num_rot,
+                                              rot,
+                                              num_q,
+                                              q);
 
   return PyLong_FromLong((long) num_ir);
 }
@@ -754,6 +836,14 @@ py_get_grid_points_by_rotations(PyObject *self, PyObject *args)
   PyArrayObject* rot_reciprocal_py;
   PyArrayObject* mesh_py;
   PyArrayObject* is_shift_py;
+
+  int *rot_grid_points;
+  int *address_orig;
+  int (*rot_reciprocal)[3][3];
+  int num_rot;
+  int* mesh;
+  int* is_shift;
+
   if (!PyArg_ParseTuple(args, "OOOOO",
 			&rot_grid_points_py,
 			&address_orig_py,
@@ -763,12 +853,12 @@ py_get_grid_points_by_rotations(PyObject *self, PyObject *args)
     return NULL;
   }
 
-  int *rot_grid_points = (int*)PyArray_DATA(rot_grid_points_py);
-  const int *address_orig = (int*)PyArray_DATA(address_orig_py);
-  SPGCONST int (*rot_reciprocal)[3][3] = (int(*)[3][3])PyArray_DATA(rot_reciprocal_py);
-  const int num_rot = PyArray_DIMS(rot_reciprocal_py)[0];
-  const int* mesh = (int*)PyArray_DATA(mesh_py);
-  const int* is_shift = (int*)PyArray_DATA(is_shift_py);
+  rot_grid_points = (int*)PyArray_DATA(rot_grid_points_py);
+  address_orig = (int*)PyArray_DATA(address_orig_py);
+  rot_reciprocal = (int(*)[3][3])PyArray_DATA(rot_reciprocal_py);
+  num_rot = PyArray_DIMS(rot_reciprocal_py)[0];
+  mesh = (int*)PyArray_DATA(mesh_py);
+  is_shift = (int*)PyArray_DATA(is_shift_py);
 
   spg_get_grid_points_by_rotations(rot_grid_points,
 				   address_orig,
@@ -788,6 +878,15 @@ py_get_BZ_grid_points_by_rotations(PyObject *self, PyObject *args)
   PyArrayObject* mesh_py;
   PyArrayObject* is_shift_py;
   PyArrayObject* bz_map_py;
+
+  int *rot_grid_points;
+  int *address_orig;
+  int (*rot_reciprocal)[3][3];
+  int num_rot;
+  int* mesh;
+  int* is_shift;
+  int* bz_map;
+
   if (!PyArg_ParseTuple(args, "OOOOOO",
 			&rot_grid_points_py,
 			&address_orig_py,
@@ -798,13 +897,13 @@ py_get_BZ_grid_points_by_rotations(PyObject *self, PyObject *args)
     return NULL;
   }
 
-  int *rot_grid_points = (int*)PyArray_DATA(rot_grid_points_py);
-  const int *address_orig = (int*)PyArray_DATA(address_orig_py);
-  SPGCONST int (*rot_reciprocal)[3][3] = (int(*)[3][3])PyArray_DATA(rot_reciprocal_py);
-  const int num_rot = PyArray_DIMS(rot_reciprocal_py)[0];
-  const int* mesh = (int*)PyArray_DATA(mesh_py);
-  const int* is_shift = (int*)PyArray_DATA(is_shift_py);
-  const int* bz_map = (int*)PyArray_DATA(bz_map_py);
+  rot_grid_points = (int*)PyArray_DATA(rot_grid_points_py);
+  address_orig = (int*)PyArray_DATA(address_orig_py);
+  rot_reciprocal = (int(*)[3][3])PyArray_DATA(rot_reciprocal_py);
+  num_rot = PyArray_DIMS(rot_reciprocal_py)[0];
+  mesh = (int*)PyArray_DATA(mesh_py);
+  is_shift = (int*)PyArray_DATA(is_shift_py);
+  bz_map = (int*)PyArray_DATA(bz_map_py);
 
   spg_get_BZ_grid_points_by_rotations(rot_grid_points,
 				      address_orig,
@@ -824,6 +923,15 @@ static PyObject * py_relocate_BZ_grid_address(PyObject *self, PyObject *args)
   PyArrayObject* mesh_py;
   PyArrayObject* is_shift_py;
   PyArrayObject* reciprocal_lattice_py;
+
+  int (*bz_grid_address)[3];
+  int *bz_map;
+  int (*grid_address)[3];
+  int* mesh;
+  int* is_shift;
+  double (*reciprocal_lattice)[3];
+  int num_ir_gp;
+
   if (!PyArg_ParseTuple(args, "OOOOOO",
 			&bz_grid_address_py,
 			&bz_map_py,
@@ -834,14 +942,12 @@ static PyObject * py_relocate_BZ_grid_address(PyObject *self, PyObject *args)
     return NULL;
   }
 
-  int (*bz_grid_address)[3] = (int(*)[3])PyArray_DATA(bz_grid_address_py);
-  int *bz_map = (int*)PyArray_DATA(bz_map_py);
-  SPGCONST int (*grid_address)[3] = (int(*)[3])PyArray_DATA(grid_address_py);
-  const int* mesh = (int*)PyArray_DATA(mesh_py);
-  const int* is_shift = (int*)PyArray_DATA(is_shift_py);
-  SPGCONST double (*reciprocal_lattice)[3]  =
-    (double(*)[3])PyArray_DATA(reciprocal_lattice_py);
-  int num_ir_gp;
+  bz_grid_address = (int(*)[3])PyArray_DATA(bz_grid_address_py);
+  bz_map = (int*)PyArray_DATA(bz_map_py);
+  grid_address = (int(*)[3])PyArray_DATA(grid_address_py);
+  mesh = (int*)PyArray_DATA(mesh_py);
+  is_shift = (int*)PyArray_DATA(is_shift_py);
+  reciprocal_lattice = (double(*)[3])PyArray_DATA(reciprocal_lattice_py);
 
   num_ir_gp = spg_relocate_BZ_grid_address(bz_grid_address,
 					   bz_map,
@@ -857,13 +963,17 @@ static PyObject * py_delaunay_reduce(PyObject *self, PyObject *args)
 {
   PyArrayObject* lattice_py;
   double symprec;
+
+  double (*lattice)[3];
+  int result;
+
   if (!PyArg_ParseTuple(args, "Od", &lattice_py, &symprec)) {
     return NULL;
   }
 
-  double (*lattice)[3] = (double(*)[3])PyArray_DATA(lattice_py);
+  lattice = (double(*)[3])PyArray_DATA(lattice_py);
 
-  int result = spg_delaunay_reduce(lattice, symprec);
+  result = spg_delaunay_reduce(lattice, symprec);
 
   return PyLong_FromLong((long) result);
 }
@@ -872,24 +982,30 @@ static PyObject * py_niggli_reduce(PyObject *self, PyObject *args)
 {
   PyArrayObject* lattice_py;
   double eps;
+
+  double (*lattice)[3];
+  int result;
+
   if (!PyArg_ParseTuple(args, "Od", &lattice_py, &eps)) {
     return NULL;
   }
 
-  double (*lattice)[3] = (double(*)[3])PyArray_DATA(lattice_py);
+  lattice = (double(*)[3])PyArray_DATA(lattice_py);
 
-  int result = spg_niggli_reduce(lattice, eps);
+  result = spg_niggli_reduce(lattice, eps);
 
   return PyLong_FromLong((long) result);
 }
 
 static PyObject * py_get_error_message(PyObject *self, PyObject *args)
 {
+  SpglibError error;
+
   if (!PyArg_ParseTuple(args, "")) {
     return NULL;
   }
 
-  const SpglibError error = spg_get_error_code();
+  error = spg_get_error_code();
 
   return PYUNICODE_FROMSTRING(spg_get_error_message(error));
 }
diff --git a/src/site_symmetry.c b/src/site_symmetry.c
index 46f7053..77d5c71 100644
--- a/src/site_symmetry.c
+++ b/src/site_symmetry.c
@@ -37,6 +37,7 @@
 #include "cell.h"
 #include "mathfunc.h"
 #include "symmetry.h"
+#include "site_symmetry.h"
 #include "sitesym_database.h"
 
 #include "debug.h"
diff --git a/src/sitesym_database.c b/src/sitesym_database.c
index baf8c42..8c8fe5c 100644
--- a/src/sitesym_database.c
+++ b/src/sitesym_database.c
@@ -32,6 +32,8 @@
 /* ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE */
 /* POSSIBILITY OF SUCH DAMAGE. */
 
+#include "sitesym_database.h"
+
 static const int position_wyckoff[] =
   {    0, /* The first element is dummy. */
        1,    2,   11,   16,   21,   26,   27,   28,   29,   32,
diff --git a/src/spin.c b/src/spin.c
index 42dace1..2de6fa0 100644
--- a/src/spin.c
+++ b/src/spin.c
@@ -37,6 +37,7 @@
 #include "mathfunc.h"
 #include "symmetry.h"
 #include "cell.h"
+#include "spin.h"
 #include "debug.h"
 
 static Symmetry * get_collinear_operations(SPGCONST Symmetry *sym_nonspin,
